!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t(function(){try{return require("moment-timezone")}catch(e){}}(),function(){try{return require("moment")}catch(e){}}());else if("function"==typeof define&&define.amd)define(["moment-timezone","moment"],t);else{var a="object"==typeof exports?t(function(){try{return require("moment-timezone")}catch(e){}}(),function(){try{return require("moment")}catch(e){}}()):t(e["moment-timezone"],e.moment);for(var r in a)("object"==typeof exports?exports:e)[r]=a[r]}}(this,((e,t)=>(()=>{"use strict";var a={192:e=>{if(void 0===t){var a=new Error("Cannot find module 'moment'");throw a.code="MODULE_NOT_FOUND",a}e.exports=t},360:t=>{if(void 0===e){var a=new Error("Cannot find module 'moment-timezone'");throw a.code="MODULE_NOT_FOUND",a}t.exports=e}},r={};function n(e){var t=r[e];if(void 0!==t)return t.exports;var T=r[e]={exports:{}};return a[e](T,T.exports,n),T.exports}n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var T={};return(()=>{n.d(T,{default:()=>O});const e={"-720":["AoE","Y"],"-660":["NUT","SST","X"],"-600":["HST","CKT","TAHT","W"],"-570":["MART"],"-540":["AKST","HDT","GAMT","V"],"-480":["PST","AKDT","U","PT"],"-420":["MST","PDT","T","MT","PT"],"-360":["CST","MDT","EAST","GALT","S","CT","MT"],"-300":["EST","CDT","ACT","CIST","COT","CST","EASST","ECT","PET","R","ET","CT"],"-240":["EDT","AST","AMT","BOT","CIDST","CLT","FKT","GYT","VET","Q","AT","ET"],"-210":["NST"],"-180":["UYT","ADT","AMST","ART","BRT","CLST","FKST","GFT","PMST","ROTT","SRT","UYT","WARST","WGT","P","AT"],"-150":["NDT"],"-120":["GST","BRST","FNT","GST","PMDT","UYST","WGST","O"],"-60":["CVT","AZOT","CVT","EGT","N"],0:["UTC","GMT","AZOST","EGST","WET","Z","WT"],60:["CET","BST","WAT","WEST","WST","A"],120:["CAT","CEST","EET","SAST","WAST","B"],180:["EAT","EEST","FET","MSK","SYOT","TRT","C"],210:["IRST"],240:["GET","AZT","KUYT","MSD","MUT","RET","SAMT","SCT","D"],270:["AFT","IRDT"],300:["UZT","AQTT","AZST","MAWT","MVT","ORAT","PKT","TFT","TJT","TMT","YEKT","E"],330:["IST"],345:["NPT"],360:["BTT","ALMT","BTT","IOT","KGT","OMST","QYZT","VOST","YEKST","F"],390:["MMT","CCT"],420:["ICT","CXT","DAVT","HOVT","KRAT","NOVST","NOVT","OMSST","WIB","G"],480:["HKT","AWST","BNT","CAST","CHOT","HOVST","IRKT","KRAST","MYT","PHT","SGT","ULAT","WITA","H"],510:["PYT"],525:["ACWST"],540:["JST","AWDT","CHOST","IRKST","KST","PWT","TLT","ULAST","WIT","YAKT","I"],570:["ACST","ACT"],600:["PGT","AEST","CHUT","ChST","DDUT","VLAT","YAKST","YAPT","K","AET"],630:["ACDT","LHST","ACT"],660:["VUT","AEDT","KOST","LHDT","MAGT","NCT","NFT","PONT","SAKT","SBT","SRET","VLAST","L","AET"],720:["FJT","ANAST","ANAT","GILT","MAGST","MHT","NFDT","NRT","NZST","PETST","PETT","TVT","WAKT","WFT","M"],765:["CHAST"],780:["TOT","FJST","NZDT","PHOT","TKT","TOT"],825:["CHADT"],840:["LINT","TOST","WST"]},t={A:"Alpha Time Zone",ACDT:"Australian Central Daylight Time",ACST:"Australian Central Standard Time",ACT:"Australian Central Time",ACWST:"Australian Central Western Standard Time",ADT:"Atlantic Daylight Time",ADST:"Atlantic Daylight Saving Time",AEDT:"Australian Eastern Daylight Time",AEST:"Australian Eastern Standard Time",AET:"Australian Eastern Time",AFT:"Afghanistan Time",AKDT:"Alaska Daylight Time",AKST:"Alaska Standard Time",ALMT:"Alma-Ata Time",AMDT:"Armenia Daylight Time",AMST:"Amazon Summer Time",AMT:"Amazon Time",ANAST:"Anadyr Summer Time",ANAT:"Anadyr Time",AQTT:"Aqtobe Time",ART:"Argentina Time",AST:"Atlantic Standard Time",AT:"Atlantic Time",AWDT:"Australian Western Daylight Time",AWST:"Australian Western Standard Time",AZODT:"Azores Daylight Time",AZOST:"Azores Summer Time",AZOT:"Azores Time",AZST:"Azerbaijan Summer Time",AZT:"Azerbaijan Time",AoE:"Anywhere on Earth",B:"Bravo Time Zone",BDST:"British Daylight Saving Time",BDT:"Brunei Time",BNT:"Brunei Darussalam Time",BOT:"Bolivia Time",BRST:"Brasília Summer Time",BRT:"Brasília Time",BST:"British Summer Time",BT:"Brazil Time",BTT:"Bhutan Time",C:"Charlie Time Zone",CAST:"Casey Time",CAT:"Central Africa Time",CCT:"Cocos Islands Time",CDT:"Central Daylight Time",CDST:"Central Daylight Savings Time",CEDT:"Central European Daylight Time",CEST:"Central European Summer Time",CET:"Central European Time",CHADT:"Chatham Island Daylight Time",CHAST:"Chatham Island Standard Time",CHODT:"Choibalsan Daylight Time",CHODST:"Choibalsan Daylight Saving Time",CHOST:"Choibalsan Summer Time",CHOT:"Choibalsan Time",CHUT:"Chuuk Time",CIDST:"Cayman Islands Daylight Saving Time",CIST:"Cayman Islands Standard Time",CIT:"Cayman Islands Time",CKT:"Cook Island Time",CLDT:"Chile Daylight Time",CLST:"Chile Summer Time",CLT:"Chile Standard Time",COT:"Colombia Time",CST:"Central Standard Time",CT:"Central Time",CVT:"Cape Verde Time",CXT:"Christmas Island Time",ChST:"Chamorro Standard Time",D:"Delta Time Zone",DAVT:"Davis Time",DDUT:"Dumont-d'Urville Time",E:"Echo Time Zone",EADT:"Easter Island Daylight Time",EASST:"Easter Island Summer Time",EAST:"Easter Island Standard Time",EAT:"Eastern Africa Time",ECST:"European Central Summer Time",ECT:"Ecuador Time",EDT:"Eastern Daylight Time",EDST:"Eastern Daylight Saving Time",EEDT:"Eastern European Daylight Time",EEST:"Eastern European Summer Time",EET:"Eastern European Time",EFATE:"Efate Time",EGST:"Eastern Greenland Summer Time",EGT:"East Greenland Time",EST:"Eastern Standard Time",ET:"Eastern Time",F:"Foxtrot Time Zone",FET:"Further-Eastern European Time",FJDT:"Fiji Daylight Time",FJST:"Fiji Summer Time",FJT:"Fiji Time",FKDT:"Falkland Island Daylight Time",FKST:"Falkland Islands Summer Time",FKT:"Falkland Island Time",FNT:"Fernando de Noronha Time",G:"Golf Time Zone",GALT:"Galapagos Time",GAMT:"Gambier Time",GET:"Georgia Standard Time",GFT:"French Guiana Time",GILT:"Gilbert Island Time",GMT:"Greenwich Mean Time",GST:"South Georgia Time",GT:"Greenwich Time",GYT:"Guyana Time",H:"Hotel Time Zone",HAA:"Heure Avancée de l'Atlantique",HAC:"Heure Avancée du Centre",HADT:"Hawaii Daylight Time",HAE:"Heure Avancée de l'Est",HAP:"Heure Avancée du Pacifique",HAST:"Hawaii-Aleutian Standard Time",HAR:"Heure Avancée des Rocheuses",HAT:"Heure Avancée de Terre-Neuve",HDT:"Hawaii-Aleutian Daylight Time",HLV:"Hora Legal de Venezuela",HNA:"Heure Normale de l'Atlantique",HNC:"Heure Normale du Centre",HNE:"Heure Normale de l'Est",HNP:"Heure Normale du Pacifique",HNR:"Heure Normale des Rocheuses",HNT:"Heure Normale de Terre-Neuve",HKT:"Hong Kong Time",HOVDT:"Hovd Daylight Time",HOVDST:"Hovd Daylight Saving Time",HOVST:"Hovd Summer Time",HOVT:"Hovd Time",HST:"Hawaii Standard Time",I:"India Time Zone",ICT:"Indochina Time",IDT:"Israel Daylight Time",IOT:"Indian Chagos Time",IRDT:"Iran Daylight Time",IRKST:"Irkutsk Summer Time",IRKT:"Irkutsk Time",IRST:"Iran Standard Time",IST:"India Standard Time",JST:"Japan Standard Time",K:"Kilo Time Zone",KGT:"Kyrgyzstan Time",KIT:"Kerguelen (Islands) Time",KOST:"Kosrae Time",KRAST:"Krasnoyarsk Summer Time",KRAT:"Krasnoyarsk Time",KST:"Korea Standard Time",KT:"Korea Time",KUYT:"Kuybyshev Time",L:"Lima Time Zone",LHDT:"Lord Howe Daylight Time",LHST:"Lord Howe Standard Time",LINT:"Line Islands Time",M:"Mike Time Zone",MAGST:"Magadan Summer Time",MAGT:"Magadan Time",MART:"Marquesas Time",MAWT:"Mawson Time",MCK:"Moscow Time",MDST:"Mountain Daylight Saving Time",MDT:"Mountain Daylight Time",MESZ:"Mitteleuropäische Sommerzeit",MEZ:"Mitteleuropäische Zeit",MHT:"Marshall Islands Time",MMT:"Myanmar Time",MST:"Mountain Standard Time",MSK:"Moscow Standard Time",MT:"Mountain Time",MUT:"Mauritius Time",MVT:"Maldives Time",MYT:"Malaysia Time",N:"November Time Zone",NACDT:"North American Central Daylight Time",NACST:"North American Central Standard Time",NAEDT:"North American Eastern Daylight Time",NAEST:"North American Eastern Standard Time",NAMDT:"North American Mountain Daylight Time",NAMST:"North American Mountain Standard Time",NAPDT:"North American Pacific Daylight Time",NAPST:"North American Pacific Standard Time",NCT:"New Caledonia Time",NDT:"Newfoundland Daylight Time",NFDT:"Norfolk Daylight Time",NFT:"Norfolk Time",NOVST:"Novosibirsk Summer Time",NOVT:"Novosibirsk Time",NPT:"Nepal Time",NRT:"Nauru Time",NST:"Newfoundland Standard Time",NUT:"Niue Time",NZDT:"New Zealand Daylight Time",NZST:"New Zealand Standard Time",O:"Oscar Time Zone",OESZ:"Osteuropäische Sommerzeit",OEZ:"Osteuropäische Zeit",OMSST:"Omsk Summer Time",OMST:"Omsk Standard Time",ORAT:"Oral Time",P:"Papa Time Zone",PDT:"Pacific Daylight Time",PDST:"Pacific Daylight Saving Time",PET:"Peru Time",PETST:"Kamchatka Summer Time",PETT:"Kamchatka Time",PGT:"Papua New Guinea Time",PHOT:"Phoenix Island Time",PHT:"Philippine Time",PKT:"Pakistan Standard Time",PMDT:"Pierre & Miquelon Daylight Time",PMST:"Pierre & Miquelon Standard Time",PONT:"Pohnpei Standard Time",PST:"Pacific Standard Time",PT:"Pacific Time",PWT:"Palau Time",PYST:"Pyongyang Standard Time",PYT:"Pyongyang Time",Q:"Quebec Time Zone",QYZT:"Qyzylorda Time",R:"Romeo Time Zone",RET:"Reunion Time",ROTT:"Rothera Time",S:"Sierra Time Zone",SAKT:"Sakhalin Time",SAMT:"Samara Time",SAMST:"Samara Summer Time",SAST:"South Africa Standard Time",SBT:"Solomon Islands Time",SCT:"Seychelles Time",SGT:"Singapore Time",SRET:"Srednekolymsk Time",SRT:"Suriname Time",SST:"Samoa Standard Time",SYOT:"Syowa Time",T:"Tango Time Zone",TAHT:"Tahiti Time",TFT:"French Southern and Antarctic Time",TJT:"Tajikistan Time",TKT:"Tokelau Time",TLT:"East Timor Time",TMT:"Turkmenistan Time",TOST:"Tonga Summer Time",TOT:"Tonga Time",TRT:"Turkey Time",tVT:"Tuvalu Time",U:"Uniform Time Zone",ULAST:"Ulaanbaatar Summer Time",ULAT:"Ulaanbaatar Time",UTC:"Coordinated Universal Time",UYST:"Uruguay Summer Time",UYT:"Uruguay Time",UZT:"Uzbekistan Time",V:"Victor Time Zone",VET:"Venezuelan Standard Time",VLAST:"Vladivostok Summer Time",VLAT:"Vladivostok Time",VOST:"Vostok Time",VUT:"Vanuatu Time",W:"Whiskey Time Zone",WAKT:"Wake Time",WARST:"Western Argentine Summer Time",WAST:"West Africa Summer Time",WAT:"West Africa Time",WDT:"Western Daylight Time",WEDT:"Western European Daylight Time",WEST:"Western European Summer Time",WESZ:"Westeuropäische Sommerzeit",WET:"Western European Time",WEZ:"Westeuropäische Zeit",WFT:"Wallis and Futuna Time",WGST:"Western Greenland Summer Time",WGT:"West Greenland Time",WIB:"Western Indonesian Time",WIT:"Eastern Indonesian Time",WITA:"Central Indonesian Time",WST:"Western Standard Time",WT:"Western Sahara Standard Time",X:"X-ray Time Zone",Y:"Yankee Time Zone",YAKST:"Yakutsk Summer Time",YAKT:"Yakutsk Time",YAPT:"Yap Time",YEKST:"Yekaterinburg Summer Time",YEKT:"Yekaterinburg Time",Z:"Zulu Time Zone"};const a={},r=e=>t[e]?t[e]:null,i=t=>{const r=moment(t).utcOffset();if(!a[r]){const t=(t=>{if(!moment.tz)return null;const a=moment.tz.guess(),r=a?moment.tz(a).format("z"):null,n=e[String(t)];return n?n.indexOf(r)>=0?r:n[0]:null})(r);t?a[r]=t:console.warn("- unhandled offset: "+r)}return a[r]||null},o=e=>Number.isInteger(e)?String(Math.abs(e)):e.replace(/^-/,""),m=(e,t)=>{const a=o(e);return a.length>=t?String(e):(a!==e?"-":"")+("0".repeat(t)+a).substr(0-t)};class s{constructor(e,t){if(function(e,t,a){(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var a=e[Symbol.toPrimitive];if(void 0!==a){var r=a.call(e,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a}(this,"count",0),1!=e.length)throw new Error("You must provide a single character when creating a token!");this.token=e,this.count=void 0===t?1:t}increment(){return this.count++,this.count}equals(e){return this.token===e.token&&this.count===e.count}toString(){return this.token.repeat(this.count)}}class u{}const l=/[A-Za-z]/,S=e=>e.year()>0?"AD":"BC",d=e=>{let t=e.zoneAbbr();const a=e.zoneName();if(e.tz)return a&&""!==a?"UTC"===t&&0!==e.utcOffset()?null:{abbr:t,name:a,description:r(t)}:null;if(t=i(e),t){const e=r(t);if(e)return{abbr:t,name:a,description:e}}return null},f={G:S,GG:S,GGG:S,GGGG:S,GGGGG:S,GGGGGG:S,y:e=>o(e.format("Y")),yy:e=>o(e.format("YY")),yyy:e=>m(o(e.format("YYYY")),3),yyyy:e=>o(e.format("YYYY")),yyyyy:e=>m(o(e.format("YYYY")),5),yyyyyy:e=>m(o(e.format("YYYY")),6),Y:"gggg",YY:"gg",YYY:e=>m(e.format("gggg"),3),YYYY:"gggg",YYYYY:e=>m(e.format("gggg"),5),YYYYYY:e=>m(e.format("gggg"),6),M:"M",MM:"MM",MMM:"MMM",MMMM:"MMMM",MMMMM:"MMMM",MMMMMM:"MMMM",w:e=>m(e.format("w"),1),ww:e=>m(e.format("w"),2),www:e=>m(e.format("w"),3),wwww:e=>m(e.format("w"),4),wwwww:e=>m(e.format("w"),5),wwwwww:e=>m(e.format("w"),6),W:null,WW:null,WWW:null,WWWW:null,D:"DDD",DD:e=>m(e.format("DDD"),2),DDD:e=>m(e.format("DDD"),3),DDDD:e=>m(e.format("DDD"),4),DDDDD:e=>m(e.format("DDD"),5),DDDDDD:e=>m(e.format("DDD"),6),d:"D",dd:"DD",ddd:e=>m(e.format("D"),3),dddd:e=>m(e.format("D"),4),ddddd:e=>m(e.format("D"),5),dddddd:e=>m(e.format("D"),6),F:null,FF:null,FFF:null,FFFF:null,E:"ddd",EE:"ddd",EEE:"ddd",EEEE:"dddd",EEEEE:"dddd",EEEEEE:"dddd",u:"E",uu:e=>m(e.format("E"),2),uuu:e=>m(e.format("E"),3),uuuu:e=>m(e.format("E"),4),uuuuu:e=>m(e.format("E"),5),uuuuuu:e=>m(e.format("E"),6),a:"A",aa:"A",aaa:"A",aaaa:"A",aaaaa:"A",aaaaaa:"A",H:"H",HH:"HH",HHH:e=>m(e.format("H"),3),HHHH:e=>m(e.format("H"),4),HHHHH:e=>m(e.format("H"),5),HHHHHH:e=>m(e.format("H"),6),k:"k",kk:"kk",kkk:e=>m(e.format("k"),3),kkkk:e=>m(e.format("k"),4),kkkkk:e=>m(e.format("k"),5),kkkkkk:e=>m(e.format("k"),6),K:e=>{const t=parseInt(e.format("h"),10);return o(t%12)},KK:e=>{const t=parseInt(e.format("h"),10);return m(o(t%12),2)},KKK:e=>{const t=parseInt(e.format("h"),10);return m(o(t%12),3)},KKKK:e=>{const t=parseInt(e.format("h"),10);return m(o(t%12),4)},KKKKK:e=>{const t=parseInt(e.format("h"),10);return m(o(t%12),5)},KKKKKK:e=>{const t=parseInt(e.format("h"),10);return m(o(t%12),6)},h:"h",hh:"hh",hhh:e=>m(e.format("h"),3),hhhh:e=>m(e.format("h"),4),hhhhh:e=>m(e.format("h"),5),hhhhhh:e=>m(e.format("h"),6),m:"m",mm:"mm",mmm:e=>m(e.format("m"),3),mmmm:e=>m(e.format("m"),4),mmmmm:e=>m(e.format("m"),5),mmmmmm:e=>m(e.format("m"),6),s:"s",ss:"ss",sss:e=>m(e.format("s"),3),ssss:e=>m(e.format("s"),4),sssss:e=>m(e.format("s"),5),ssssss:e=>m(e.format("s"),6),S:"S",SS:"SS",SSS:"SSS",SSSS:"SSSS",SSSSS:e=>m(e.format("SSSS"),5),SSSSSS:e=>m(e.format("SSSS"),6),z:e=>{const t=d(e);return t?t.abbr:"GMT"+e.format("Z")},zz:e=>{const t=d(e);return t?t.abbr:"GMT"+e.format("Z")},zzz:e=>{const t=d(e);return t?t.abbr:"GMT"+e.format("Z")},zzzz:e=>{const t=d(e);return t?t.description:"GMT"+e.format("Z")},zzzzz:e=>{const t=d(e);return t?t.description:"GMT"+e.format("Z")},zzzzzz:e=>{const t=d(e);return t?t.description:"GMT"+e.format("Z")},Z:"ZZ",ZZ:"ZZ",ZZZ:"ZZ",ZZZZ:"ZZ",ZZZZZ:"ZZ",ZZZZZZ:"ZZ",X:e=>0===e.utcOffset()?"Z":e.format("Z").substr(0,3),XX:e=>0===e.utcOffset()?"Z":e.format("ZZ"),XXX:e=>0===e.utcOffset()?"Z":e.format("Z")};class c extends u{tokenize(e){const t=[],a=e.length;let r=!1,n=0,T=null,i=null;const o=(e,a)=>{const r=f[e];if(null===r)throw new Error(`'${e.repeat(a)}' cannot be converted to a moment format token; token is not implemented`);if(void 0===r)throw new Error(`'${e.repeat(a)}' cannot be converted to a moment format token; unknown token`);t.push(new s(e,a))},m=e=>{t[t.length-1]instanceof s?t.push(e):t[t.length-1]+=e};for(let t=0;t<a;t++){let s=e.charAt(t);if("'"!==s)if(r)i+=s;else if(s.match(l)){if(void 0===f[s])throw new Error(`Illegal pattern character '${s}'`);null!==T&&T!==s?(o(T,n),T=s,n=1):(T=s,n++)}else if(0!==n&&(o(T,n),T=null,n=0),s.charCodeAt(0)<128)m(s);else{let r;for(r=t+1;r<a;r++){const t=e.charAt(r);if("'"===t||t.match(l))break}for(;t<r;t++)m(e.charAt(t));t--}else{if(t+1<a&&(s=e.charAt(t+1),"'"===s)){t++,0!=n&&(o(T,n),T=null,n=0),r?i+=s:m(s);continue}r?(m(i),r=!1):(0!==n&&(o(T,n),T=null,n=0),i="",r=!0)}}if(r)throw new Error("Unterminated quote");return 0!=n&&o(T,n),t}format(e,t){const a=this.tokenize(t),r=[];for(const t of a)if(t instanceof s){const a=t.toString(),n=f[a];if(void 0===n)throw new Error(`'${a}' cannot be converted to a moment format token; unknown token`);"function"==typeof n?r.push(n(e,a)):r.push(e.format(n))}else r.push(t);return r.join("")}}const h=/:?00$/,A=/[A-Za-z]/,D=e=>e.year()>0?"AD":"BC",g=e=>{const t=e.zoneAbbr();return"UTC"===t&&0!=e.utcOffset()?null:t},E={G:D,GG:D,GGG:D,GGGG:e=>e.year()>0?"Anno Domini":"Before Christ",GGGGG:e=>D(e).substring(0,1),u:e=>m(e.format("YYYY"),1),uu:e=>m(o(e.format("YY")),2),uuu:e=>m(e.format("YYYY"),3),uuuu:"YYYY",uuuuu:e=>m(e.format("YYYY"),5),uuuuuu:e=>m(e.format("YYYY"),6),y:e=>o(e.format("Y")),yy:e=>o(e.format("YY")),yyy:e=>m(o(e.format("YYYY")),3),yyyy:e=>o(e.format("YYYY")),yyyyy:e=>m(o(e.format("YYYY")),5),yyyyyy:e=>m(o(e.format("YYYY")),6),D:"DDD",DD:e=>{const t=e.format("DDD");if(t.length>2)throw new Error("Field DayOfYear cannot be printed as the value "+t+" exceeds the maximum print width of 2");return m(t,2)},DDD:"DDDD",M:"M",MM:"MM",MMM:"MMM",MMMM:"MMMM",MMMMM:e=>e.format("MMMM").substring(0,1),L:"M",LL:"MM",LLL:"M",LLLL:"M",LLLLL:"M",d:"D",dd:"DD",Q:"Q",QQ:e=>m(e.format("Q"),2),QQQ:e=>"Q"+e.format("Q"),QQQQ:e=>e.format("Qo")+" quarter",QQQQQ:"Q",q:"Q",qq:e=>m(e.format("Q"),2),qqq:"Q",qqqq:"Q",qqqqq:"Q",Y:e=>m(e.format("gggg"),1),YY:"gg",YYY:e=>m(e.format("gggg"),3),YYYY:"gggg",YYYYY:e=>m(e.format("gggg"),5),YYYYYY:e=>m(e.format("gggg"),6),w:"w",ww:"ww",W:null,WW:null,WWW:null,WWWW:null,E:"ddd",EE:"ddd",EEE:"ddd",EEEE:"dddd",EEEEE:e=>e.format("dddd").substring(0,1),e:"d",ee:e=>m(e.format("d"),2),eee:"ddd",eeee:"dddd",eeeee:e=>e.format("dddd").substring(0,1),c:"d",ccc:"ddd",cccc:"dddd",ccccc:e=>String(parseInt(e.format("d"),10)-1),a:"A",h:"h",hh:"hh",K:e=>o(e.hour()%12),KK:e=>{const t=o(e.hour()%12);return m(t,2)},k:"k",kk:"kk",H:"H",HH:"HH",m:"m",mm:"mm",s:"s",ss:"ss",S:"S",SS:"SS",SSS:"SSS",SSSS:"SSSS",SSSSS:e=>m(e.format("SSSS"),5),SSSSSS:e=>m(e.format("SSSS"),6),A:e=>m(e.valueOf()-e.clone().startOf("day").valueOf(),1),AA:e=>e.isSame(e.clone().startOf("day"))?"00":null,AAA:e=>e.isSame(e.clone().startOf("day"))?"000":null,AAAA:e=>e.isSame(e.clone().startOf("day"))?"0000":null,AAAAA:e=>e.isSame(e.clone().startOf("day"))?"00000":null,AAAAAA:e=>e.isSame(e.clone().startOf("day"))?"000000":null,VV:e=>{if(0===e.utcOffset())return"Z";const t=e.tz();return t&&t.length>0?t:e.format("Z")},z:e=>{if(0===e.utcOffset())return"Z";return g(e)||e.format("Z")},zz:e=>{if(0===e.utcOffset())return"Z";return g(e)||e.format("Z")},zzz:e=>{if(0===e.utcOffset())return"Z";return g(e)||e.format("Z")},zzzz:e=>{if(0===e.utcOffset())return"Z";const t=g(e);return t?r(t):e.format("Z")},O:e=>0==e.utcOffset()/60?"GMT":"GMT"+e.format("Z").replace(h,"").replace(/^([+-])0/,"$1"),OOOO:e=>0==e.utcOffset()/60?"GMT":"GMT"+e.format("Z"),X:e=>{if(0===e.utcOffset())return"Z";const t=e.format("ZZ");return t.match(h)?t.substr(0,3):t},XX:e=>0===e.utcOffset()?"Z":e.format("ZZ"),XXX:e=>0===e.utcOffset()?"Z":e.format("Z"),XXXX:e=>0===e.utcOffset()?"Z":e.format("ZZ"),XXXXX:e=>0===e.utcOffset()?"Z":e.format("Z"),x:e=>{const t=e.format("ZZ");return t.match(h)?t.substr(0,3):t},xx:"ZZ",xxx:"Z",xxxx:"ZZ",xxxxx:"Z",Z:e=>0===e.utcOffset()?"+0000":e.format("ZZ"),ZZ:e=>0===e.utcOffset()?"+0000":e.format("ZZ"),ZZZ:e=>0===e.utcOffset()?"+0000":e.format("ZZ"),ZZZZ:e=>0===e.utcOffset()?"GMT":"GMT"+e.format("Z"),ZZZZZ:e=>0===e.utcOffset()?"Z":e.format("Z")};class M extends s{constructor(e,t,a,r){super(a,r),this.padding=e,this.padChar=t}format(e){if(e.length>this.padding)throw new Error(`Cannot format padding as formatted string "${e}" exceeds pad width of ${this.padding}.`);return(this.padChar.repeat(this.padding)+e).substr(0-this.padding)}}class Z extends u{tokenize(e){let t=0,a=" ";const r=[];for(let n=0;n<e.length;n++){let T=e.charAt(n);if(T.match(A)){let i=n++;for(;n<e.length&&e.charAt(n)===T;n++);let o=n-i;if("p"===T){let r=0;if(n<e.length&&(T=e.charAt(n),T.match(A))){for(r=o,i=n++;n<e.length&&e.charAt(n)===T;n++);o=n-i}if(0===r)throw new Error("Pad letter 'p' must be followed by valid pad pattern: "+e);t=r,a=" "}const m=E[T.repeat(o)];if(null===m)throw new Error(`'${T.repeat(o)}' cannot be converted to a moment format token; token is not implemented`);if(void 0===m)throw new Error(`'${T.repeat(o)}' cannot be converted to a moment format token; unknown token`);t>0?(r.push(new M(t,a,T,o)),t=0,a=" "):r.push(new s(T,o)),n--}else if("'"===T){const t=n++;for(;n<e.length;n++)if("'"===e.charAt(n)){if(!(n+1<e.length&&"'"===e.charAt(n+1)))break;n++}if(n>=e.length)throw new Error(`Pattern ends with an incomplete string literal: ${e}`);const a=e.substring(t+1,n);0==a.length?r.push("'"):r.push(a.replace("''","'"))}else{if("["===T)throw new Error(`Optional patterns are not supported: ${T}`);if("]"===T)throw new Error(`Optional patterns are not supported: ${T}`);if("{"===T||"}"===T||"#"===T)throw new Error(`Pattern includes reserved character: '${T}'`);r[r.length-1]instanceof s?r.push(T):r[r.length-1]+=T}}return r}format(e,t){const a=this.tokenize(t),r=[];for(const t of a)if(t instanceof s){const a=t.toString(),n=E[a];if(void 0===n)throw new Error(`'${a}' cannot be converted to a moment format token; bailing`);if("function"==typeof n){const t=n(e,a);if(null===t)throw new Error(`'${a}' cannot be converted to a moment format token; bailing`);r.push(t)}else r.push(e.format(n))}else r.push(t);return r.join("")}}var y,w;const Y=function(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if(e&&e.fn.zoneAbbr){console.log("register:",e,t),e.tz?console.log("Moment.js with timezone support detected; attaching Java format methods."):console.warn("Moment.js detected, but timezone support is missing.  Some Java formatting features may not work as expected.");const a=new c,r=new Z;return e.fn.formatJavaSDF=function(e){return a.format(this,e)},e.fn.formatJavaDTF=function(e){return r.format(this,e)},e}if(console.error("Unable to attach Java format methods.  Moment.js object was invalid."),t)throw new Error("Moment.js object was invalid.")};if("undefined"!=typeof window&&null!==(y=window)&&void 0!==y&&y.moment)Y(window.moment,!1);else if(void 0!==n.g&&null!==(w=n.g)&&void 0!==w&&w.moment)Y(n.g.moment,!1);else if("undefined"!=typeof window&&window)try{const e=n(360);window.moment=Y(e,!1)}catch(e){console.warn("Failed to load moment-timezone. Attempting fallback to moment.");try{const e=n(192);window.moment=Y(e,!1)}catch(e){console.warn("Failed to load moment.  User will have to manually register.")}}let C;var p,H;"undefined"!=typeof window&&(C=null===(p=window)||void 0===p?void 0:p.moment),void 0===C&&void 0!==n.g&&(C=null===(H=n.g)||void 0===H?void 0:H.moment);const O=C})(),T.default})()));
//# sourceMappingURL=moment-javaformat.min.js.map